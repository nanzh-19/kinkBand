%%
clear all
clc
ef=324;  %纤维的杨氏模量
em=3;    %基体的杨氏模量
vf=0.3;  %纤维的泊松比
vm=0.3;  %基体的泊松比
wf=0.6;  %纤维的体积分数
wm=1-wf; %基体的体积分数
gf=0.5*ef/(1+vf);  %纤维的剪切模量 
gm=0.5*em/(1+vm);  %基体的剪切模量
s=zeros(3,3);      %初始化柔度矩阵
s(1,1)=(wf*ef+wm*em+(wf*wm*ef*em*(vf-vm)^2)/(wf*ef*(1-vm^2)+wm*em*(1-vf^2)))^-1;     %柔度矩阵分量S11
s(2,2)=wf/ef+wm/em-(2*wf*wm*(vf*em-vm*ef)^2)/((1-vf)*wm*ef*em^2+(1-vm)*wf*em*ef^2);  %柔度矩阵分量S22
s(3,3)=wf/gf+wm/gm;%柔度矩阵分量S33
s(1,2)=(wf*vf+wm*vm-vf*vm)/(wf*vm*ef+wm*vf*em-wf*ef-wm*em);  %柔度矩阵分量S12
s(2,1)=s(1,2);     %柔度矩阵分量S21
c=s^-1;            %求解刚度矩阵
%% 画F11与F12的失稳相图
number=160;
defgra1_11=zeros(number,1);
defgra1_12=zeros(number,1);
energy1=zeros(number,1);
for i=1:number
   f11=1-i*0.0001;
   f22=1;
   for j=1:200
      f12=0.005*j;
      f21=0;
        duf=zeros(4,4);    %初始化偏P/偏F矩阵
        duf(1,1)=0.5*c(1,1)*(3*f11^2+f21^2-1)+f12^2*c(3,3)+0.5*c(1,2)*(f12^2+f22^2-1)+c(1,3)*(3*f11*f12+f21*f22);  %以下为偏P/偏F矩阵的分量计算
        duf(1,2)=f21*f12*c(3,3)+f11*f22*c(1,2)+f11*f21*c(1,3)+f12*f22*c(2,3);
        duf(1,3)=(2*f11*f12+f21*f22)*c(3,3)+f11*f12*c(1,2)+0.5*(3*f11^2+f21^2-1)*c(1,3)+0.5*(3*f12^2+f22^2-1)*c(2,3);
        duf(1,4)=f11*f21*c(1,1)+f12*f22*c(3,3)+f11*f22*c(1,3)+f21*f12*c(1,3);
        duf(2,2)=0.5*(f12^2+3*f22^2-1)*c(2,2)+f21^2*c(3,3)+0.5*(f11^2+f21^2-1)*c(1,2)+(f11*f12+3*f21*f22)*c(2,3);
        duf(2,3)=f12*f22*c(2,2)+f11*f21*c(3,3)+(f21*f12+f11*f22)*c(2,3);
        duf(2,4)=(f11*f12+2*f21*f22)*c(3,3)+f21*f22*c(1,2)+0.5*(f11^2+3*f21^2-1)*c(1,3)+0.5*(f12^2+3*f22^2-1)*c(2,3);
        duf(3,3)=0.5*(3*f12^2+f22^2-1)*c(2,2)+f11^2*c(3,3)+0.5*(f11^2+f21^2-1)*c(1,2)+(3*f11*f12+f21*f22)*c(2,3);
        duf(3,4)=f11*f22*c(3,3)+f21*f12*c(1,2)+f21*f11*c(1,3)+f22*f12*c(2,3);
        duf(4,4)=0.5*(f11^2+3*f21^2-1)*c(1,1)+f22^2*c(3,3)+0.5*(f12^2+f22^2-1)*c(1,2)+(f11*f12+3*f21*f22)*c(1,3);
        duf(2,1)=duf(1,2);
        duf(3,1)=duf(1,3);
        duf(4,1)=duf(1,4);
        duf(3,2)=duf(2,3);
        duf(4,2)=duf(2,4);
        duf(4,3)=duf(3,4);
        Cri11=duf(1,1);  %将偏P/偏F矩阵分量的值临时存储，用来做遗传算法的输入量
        Cri12=duf(1,2);
        Cri13=duf(1,3);
        Cri14=duf(1,4);
        Cri22=duf(2,2);
        Cri23=duf(2,3);
        Cri24=duf(2,4);
        Cri33=duf(3,3);
        Cri34=duf(3,4);
        Cri44=duf(4,4);
        Lb1=[0;0;Cri11;Cri12;Cri13;Cri14;Cri22;Cri23;Cri24;Cri33;Cri34;Cri44]; %遗传算法变量的下界  
        Ub1=[2*pi;2*pi;Cri11;Cri12;Cri13;Cri14;Cri22;Cri23;Cri24;Cri33;Cri34;Cri44]; %遗传算法变量的上界
        options=gaoptimset('Generations',1500,'PopulationSize',100,'TolFun',1e-6);  %遗传算法的参数设置
        [xx,AE] = ga(@test,12,[],[],[],[],Lb1,Ub1,[],options);  %调用遗传算法工具箱，得到优化解，其中xx是优化后的和变量值，AE为扰动能量    
        if AE<0  %如果扰动能量首次出现负数，则材料恰好失稳，记录以下数据来画失稳相图
           energy1(i)=0.125*(f11^2+f21^2-1)^2*c(1,1)+0.125*(f12^2+f22^2-1)^2*c(2,2)+0.5*(f11*f12+f21*f22)^2*c(3,3)+0.25*(f11^2+f21^2-1)*(f12^2+f22^2-1)*c(1,2)+0.5*(f11^2+f21^2-1)*(f11*f12+f21*f22)*c(1,3)+0.5*(f11*f12+f21*f22)*(f12^2+f22^2-1)*c(2,3);%存储失稳时的能量
           defgra1_11(i)=f11;  %存储失稳时的应变梯度分量F11
           defgra1_12(i)=f12;  %存储失稳时的应变梯度分量F22
           break;
        end      
   end
   i
   i
end
%% 画F11与F22的失稳相图
number=300;
defgra2_11=zeros(number,1);
defgra2_22=zeros(number,1);
energy2=zeros(number,1);
for i=1:number
    f11=1-i*0.0001;
   for j=1:1
    f22=1.4-(j-1)*0.0025;
    
      f12=0;
      f21=0;
        duf=zeros(4,4);    %初始化偏P/偏F矩阵
        duf(1,1)=0.5*c(1,1)*(3*f11^2+f21^2-1)+f12^2*c(3,3)+0.5*c(1,2)*(f12^2+f22^2-1)+c(1,3)*(3*f11*f12+f21*f22);  %以下为偏P/偏F矩阵的分量计算
        duf(1,2)=f21*f12*c(3,3)+f11*f22*c(1,2)+f11*f21*c(1,3)+f12*f22*c(2,3);
        duf(1,3)=(2*f11*f12+f21*f22)*c(3,3)+f11*f12*c(1,2)+0.5*(3*f11^2+f21^2-1)*c(1,3)+0.5*(3*f12^2+f22^2-1)*c(2,3);
        duf(1,4)=f11*f21*c(1,1)+f12*f22*c(3,3)+f11*f22*c(1,3)+f21*f12*c(1,3);
        duf(2,2)=0.5*(f12^2+3*f22^2-1)*c(2,2)+f21^2*c(3,3)+0.5*(f11^2+f21^2-1)*c(1,2)+(f11*f12+3*f21*f22)*c(2,3);
        duf(2,3)=f12*f22*c(2,2)+f11*f21*c(3,3)+(f21*f12+f11*f22)*c(2,3);
        duf(2,4)=(f11*f12+2*f21*f22)*c(3,3)+f21*f22*c(1,2)+0.5*(f11^2+3*f21^2-1)*c(1,3)+0.5*(f12^2+3*f22^2-1)*c(2,3);
        duf(3,3)=0.5*(3*f12^2+f22^2-1)*c(2,2)+f11^2*c(3,3)+0.5*(f11^2+f21^2-1)*c(1,2)+(3*f11*f12+f21*f22)*c(2,3);
        duf(3,4)=f11*f22*c(3,3)+f21*f12*c(1,2)+f21*f11*c(1,3)+f22*f12*c(2,3);
        duf(4,4)=0.5*(f11^2+3*f21^2-1)*c(1,1)+f22^2*c(3,3)+0.5*(f12^2+f22^2-1)*c(1,2)+(f11*f12+3*f21*f22)*c(1,3);
        duf(2,1)=duf(1,2);
        duf(3,1)=duf(1,3);
        duf(4,1)=duf(1,4);
        duf(3,2)=duf(2,3);
        duf(4,2)=duf(2,4);
        duf(4,3)=duf(3,4);
        Cri11=duf(1,1);  %将偏P/偏F矩阵分量的值临时存储，用来做遗传算法的输入量
        Cri12=duf(1,2);
        Cri13=duf(1,3);
        Cri14=duf(1,4);
        Cri22=duf(2,2);
        Cri23=duf(2,3);
        Cri24=duf(2,4);
        Cri33=duf(3,3);
        Cri34=duf(3,4);
        Cri44=duf(4,4);
        Lb1=[0;0;Cri11;Cri12;Cri13;Cri14;Cri22;Cri23;Cri24;Cri33;Cri34;Cri44]; %遗传算法变量的下界  
        Ub1=[2*pi;2*pi;Cri11;Cri12;Cri13;Cri14;Cri22;Cri23;Cri24;Cri33;Cri34;Cri44]; %遗传算法变量的上界
        options=gaoptimset('Generations',1500,'PopulationSize',100,'TolFun',1e-6);  %遗传算法的参数设置
        [xx,AE] = ga(@test,12,[],[],[],[],Lb1,Ub1,[],options);  %调用遗传算法工具箱，得到优化解，其中xx是优化后的和变量值，AE为扰动能量    
        if AE<0  %如果扰动能量首次出现负数，则材料恰好失稳，记录以下数据来画失稳相图
           energy2(i)=0.125*(f11^2+f21^2-1)^2*c(1,1)+0.125*(f12^2+f22^2-1)^2*c(2,2)+0.5*(f11*f12+f21*f22)^2*c(3,3)+0.25*(f11^2+f21^2-1)*(f12^2+f22^2-1)*c(1,2)+0.5*(f11^2+f21^2-1)*(f11*f12+f21*f22)*c(1,3)+0.5*(f11*f12+f21*f22)*(f12^2+f22^2-1)*c(2,3);%存储失稳时的能量
           defgra2_11(i)=f11;  %存储失稳时的应变梯度分量F11
           defgra2_22(i)=f22;  %存储失稳时的应变梯度分量F22
           break;
        end      
   end
   i
   i
end
%% 画F11与F21的失稳相图
number=160;
defgra3_11=zeros(number,1);
defgra3_21=zeros(number,1);
energy3=zeros(number,1);
for i=1:number
   f11=1-i*0.0001;
   f22=1;
   for j=1:200
      f21=0.001*(j-1);
      f12=0;
        duf=zeros(4,4);    %初始化偏P/偏F矩阵
        duf(1,1)=0.5*c(1,1)*(3*f11^2+f21^2-1)+f12^2*c(3,3)+0.5*c(1,2)*(f12^2+f22^2-1)+c(1,3)*(3*f11*f12+f21*f22);  %以下为偏P/偏F矩阵的分量计算
        duf(1,2)=f21*f12*c(3,3)+f11*f22*c(1,2)+f11*f21*c(1,3)+f12*f22*c(2,3);
        duf(1,3)=(2*f11*f12+f21*f22)*c(3,3)+f11*f12*c(1,2)+0.5*(3*f11^2+f21^2-1)*c(1,3)+0.5*(3*f12^2+f22^2-1)*c(2,3);
        duf(1,4)=f11*f21*c(1,1)+f12*f22*c(3,3)+f11*f22*c(1,3)+f21*f12*c(1,3);
        duf(2,2)=0.5*(f12^2+3*f22^2-1)*c(2,2)+f21^2*c(3,3)+0.5*(f11^2+f21^2-1)*c(1,2)+(f11*f12+3*f21*f22)*c(2,3);
        duf(2,3)=f12*f22*c(2,2)+f11*f21*c(3,3)+(f21*f12+f11*f22)*c(2,3);
        duf(2,4)=(f11*f12+2*f21*f22)*c(3,3)+f21*f22*c(1,2)+0.5*(f11^2+3*f21^2-1)*c(1,3)+0.5*(f12^2+3*f22^2-1)*c(2,3);
        duf(3,3)=0.5*(3*f12^2+f22^2-1)*c(2,2)+f11^2*c(3,3)+0.5*(f11^2+f21^2-1)*c(1,2)+(3*f11*f12+f21*f22)*c(2,3);
        duf(3,4)=f11*f22*c(3,3)+f21*f12*c(1,2)+f21*f11*c(1,3)+f22*f12*c(2,3);
        duf(4,4)=0.5*(f11^2+3*f21^2-1)*c(1,1)+f22^2*c(3,3)+0.5*(f12^2+f22^2-1)*c(1,2)+(f11*f12+3*f21*f22)*c(1,3);
        duf(2,1)=duf(1,2);
        duf(3,1)=duf(1,3);
        duf(4,1)=duf(1,4);
        duf(3,2)=duf(2,3);
        duf(4,2)=duf(2,4);
        duf(4,3)=duf(3,4);
        Cri11=duf(1,1);  %将偏P/偏F矩阵分量的值临时存储，用来做遗传算法的输入量
        Cri12=duf(1,2);
        Cri13=duf(1,3);
        Cri14=duf(1,4);
        Cri22=duf(2,2);
        Cri23=duf(2,3);
        Cri24=duf(2,4);
        Cri33=duf(3,3);
        Cri34=duf(3,4);
        Cri44=duf(4,4);
        Lb1=[0;0;Cri11;Cri12;Cri13;Cri14;Cri22;Cri23;Cri24;Cri33;Cri34;Cri44]; %遗传算法变量的下界  
        Ub1=[2*pi;2*pi;Cri11;Cri12;Cri13;Cri14;Cri22;Cri23;Cri24;Cri33;Cri34;Cri44]; %遗传算法变量的上界
        options=gaoptimset('Generations',1500,'PopulationSize',100,'TolFun',1e-6);  %遗传算法的参数设置
        [xx,AE] = ga(@test,12,[],[],[],[],Lb1,Ub1,[],options);  %调用遗传算法工具箱，得到优化解，其中xx是优化后的和变量值，AE为扰动能量    
        if AE<0  %如果扰动能量首次出现负数，则材料恰好失稳，记录以下数据来画失稳相图
           energy3(i)=0.125*(f11^2+f21^2-1)^2*c(1,1)+0.125*(f12^2+f22^2-1)^2*c(2,2)+0.5*(f11*f12+f21*f22)^2*c(3,3)+0.25*(f11^2+f21^2-1)*(f12^2+f22^2-1)*c(1,2)+0.5*(f11^2+f21^2-1)*(f11*f12+f21*f22)*c(1,3)+0.5*(f11*f12+f21*f22)*(f12^2+f22^2-1)*c(2,3);%存储失稳时的能量
           defgra3_11(i)=f11;  %存储失稳时的应变梯度分量F11
           defgra3_21(i)=f21;  %存储失稳时的应变梯度分量F22
           break;
        end      
   end
   i
   i
end


